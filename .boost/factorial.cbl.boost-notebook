{
    "cells": [
        {
            "kind": 2,
            "languageId": "plaintext",
            "value": "        IDENTIFICATION DIVISION.\n        PROGRAM-ID. FACTORIAL.\n        DATA DIVISION.\n        WORKING-STORAGE SECTION.\n          01 CMD-ARGS                  PIC X(38).\n          01 DECINUM                  PIC S9999v99.\n          01 NUM                      PIC S9(7).\n          01 FACTORIAL                PIC 9(15) VALUE 1.\n          01 LEFT-JUST-NUMBER         PIC X(16).\n          01 WS-TALLY1                PIC 99 VALUE 0.\n          01 CNT                      PIC 9(7) VALUE 1.\n\n        PROCEDURE DIVISION.\n           ACCEPT CMD-ARGS FROM COMMAND-LINE.\n\n           IF CMD-ARGS IS ALPHABETIC THEN\n              PERFORM ERROR-PARA.\n           \n      * Convert CMDARGS to it's numeric value\n           COMPUTE DECINUM = FUNCTION NUMVAL(CMD-ARGS).\n           \n           IF DECINUM < 0 THEN\n              PERFORM ERROR-PARA.\n\n      * Move the Decimal number to Non decimal number\n           MOVE DECINUM TO NUM\n      \n      * If both are equal, then it was an integer\n           IF NUM IS EQUAL TO DECINUM THEN\n              IF NUM IS EQUAL TO 0 OR NUM IS EQUAL TO 1 THEN\n                 DISPLAY 1\n                 STOP RUN                 \n              ELSE\n                 PERFORM CALC-FACT UNTIL CNT > NUM\n      \n      * Process to left justify the number\n                 INSPECT FACTORIAL TALLYING WS-TALLY1 FOR LEADING ZEROS\n                 Move FACTORIAL (WS-TALLY1 + 1 :) TO LEFT-JUST-NUMBER\n      * Display the left justified result\n                 DISPLAY LEFT-JUST-NUMBER\n                 STOP RUN\n           ELSE \n              PERFORM ERROR-PARA.\n           \n           \n          CALC-FACT.\n            COMPUTE FACTORIAL = FACTORIAL * CNT\n            COMPUTE CNT = CNT + 1.\n\n          ERROR-PARA.\n           DISPLAY \"Usage: please input a non-negative integer\".\n           STOP RUN.\n",
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "text/markdown",
                            "data": "\n\n---\n\n### Boost Code Explanation\n\nLast Updated: Saturday, October 21, 2023 at 1:03:55 PM PDT\n\nThe provided code is written in COBOL, a language often used for business, finance, and administrative systems. The code calculates the factorial of a given non-negative integer. \n\nThe program is divided into four main sections:\n\n1. `IDENTIFICATION DIVISION` - This section is used to specify the name of the program.\n2. `DATA DIVISION` - This section is used to declare all the variables used in the program. For instance, `DECINUM` is declared to hold decimal numbers, `NUM` to hold integers, `FACTORIAL` to hold the result of the factorial computation, etc.\n3. `PROCEDURE DIVISION` - This is where the main logic of the program is written. The program accepts an input from the command line, checks if it's numeric and non-negative, and then computes the factorial if it's also an integer.\n4. `CALC-FACT` and `ERROR-PARA` - These are procedures used in the main logic. `CALC-FACT` performs the factorial computation, and `ERROR-PARA` displays an error message when the input doesn't meet the necessary conditions.\n\nThe algorithm used to compute the factorial is a simple iterative approach. It starts with a `FACTORIAL` value of 1 and a counter `CNT` also set to 1. It enters a loop where it multiplies the current `FACTORIAL` value with `CNT`, then increments `CNT` by 1. This continues until `CNT` is greater than the input number `NUM`.\n\nThe `INSPECT` statement is used to count leading zeroes in the `FACTORIAL` result. It then moves the `FACTORIAL` result, minus the leading zeroes, to `LEFT-JUST-NUMBER` to left justify the result.\n\nThe `FUNCTION NUMVAL` is a COBOL intrinsic function used to convert alphanumeric to numeric. \n\nFor more on COBOL syntax and commands, see this tutorial: [COBOL tutorial](https://www.tutorialspoint.com/cobol/index.htm).\n\nAs far as architectural guidelines are concerned, the code seems to be in line with general COBOL programming practices. It uses a clear division of code into sections, and uses procedures for code organization. However, the code lacks comments that explain what each section or variable is for, which may make it hard for others to understand. Adding more comments could improve the code's maintainability."
                        }
                    ],
                    "metadata": {
                        "outputType": "explainCode",
                        "details": []
                    }
                },
                {
                    "items": [
                        {
                            "mime": "text/markdown",
                            "data": "\n\n---\n\n### Boost Flow Diagram\n\nLast Updated: Saturday, October 21, 2023 at 12:26:59 PM PDT\n\n```mermaid\ngraph TD;\nstyle Start fill:#228B22, stroke:#000000, stroke-width:2px;\nstyle ExampleProcess fill:#228B22, stroke:#000000, stroke-width:4px;\nstyle ExampleErrorPath fill:#B22222, stroke:#000000, stroke-width:2px;\n\nStart-->CMD-ARGS;\nCMD-ARGS-- ALPHABETIC -->ERROR-PARA;\nCMD-ARGS-- NUMERIC -->DECINUM;\nDECINUM-- < 0 -->ERROR-PARA;\nDECINUM-- >= 0 -->NUM;\nNUM-- EQUAL TO -->DECINUM;\nDECINUM-- NOT EQUAL TO -->ERROR-PARA;\nNUM-- 0 OR 1 -->DISPLAY;\nNUM-- > 1 -->CALC-FACT;\nCALC-FACT-- CNT > NUM -->DISPLAY;\nDISPLAY-- STOP RUN;\nERROR-PARA-- DISPLAY -->STOP RUN;\n```\n\nThe control flow graph above represents the control flow of the given source code. The primary path is shown in green, while the error path is shown in red.\n\nThe control flow starts at the `CMD-ARGS` block, where the command-line arguments are accepted. If the `CMD-ARGS` is alphabetic, the control flow goes to the `ERROR-PARA` block, which displays an error message and stops the program.\n\nIf the `CMD-ARGS` is numeric, the control flow goes to the `DECINUM` block, where the command-line argument is converted to its numeric value. If the `DECINUM` is less than 0, the control flow goes to the `ERROR-PARA` block, which displays an error message and stops the program.\n\nIf the `DECINUM` is greater than or equal to 0, the control flow goes to the `NUM` block, where the decimal number is moved to the non-decimal number `NUM`. If the `NUM` is equal to the `DECINUM`, the control flow goes to the `EQUAL TO` block.\n\nIf the `NUM` is equal to 0 or 1, the control flow goes to the `DISPLAY` block, which displays 1 and stops the program. If the `NUM` is greater than 1, the control flow goes to the `CALC-FACT` block, where the factorial is calculated until `CNT` is greater than `NUM`.\n\nAfter the factorial calculation, the control flow goes to the `DISPLAY` block, which displays the left-justified result of the factorial. Finally, the control flow stops the program.\n\nIf any of the conditions are not met, the control flow goes to the `ERROR-PARA` block, which displays an error message and stops the program."
                        }
                    ],
                    "metadata": {
                        "outputType": "flowDiagram",
                        "details": []
                    }
                },
                {
                    "items": [
                        {
                            "mime": "text/markdown",
                            "data": "\n\n---\n\n### Boost Source-Level Security Analysis\n\nLast Updated: Saturday, October 21, 2023 at 12:27:08 PM PDT\n\n**No bugs found**"
                        }
                    ],
                    "metadata": {
                        "outputType": "bugAnalysisList",
                        "details": {}
                    }
                },
                {
                    "items": [
                        {
                            "mime": "text/markdown",
                            "data": "\n\n---\n\n### Boost Source-Level Performance Analysis\n\nLast Updated: Saturday, October 21, 2023 at 12:27:42 PM PDT\n\n1. **Severity**: 4/10\n\n   **Line Number**: 14\n\n   **Bug Type**: CPU\n\n   **Description**: The use of FUNCTION NUMVAL for converting string to number is CPU-intensive. This function performs a lot of unnecessary checks for a simple integer conversion.\n\n   **Solution**: Use a simpler conversion function or method if available in the COBOL version you are using. If not, consider writing a custom conversion routine that does the bare minimum required for your specific use case.\n\n\n2. **Severity**: 6/10\n\n   **Line Number**: 33\n\n   **Bug Type**: CPU\n\n   **Description**: The factorial calculation is done using a loop which is not efficient for large numbers. This can lead to high CPU usage and long execution times.\n\n   **Solution**: Consider using a more efficient algorithm for calculating factorial. For example, you could use a recursive function or utilize a memoization technique to store previously calculated results. However, be aware that recursion in COBOL can be tricky and may not be supported in all versions.\n\n\n3. **Severity**: 3/10\n\n   **Line Number**: 40\n\n   **Bug Type**: Memory\n\n   **Description**: The INSPECT TALLYING FOR LEADING ZEROS operation is not efficient as it scans the entire string. This can be memory-intensive for large strings.\n\n   **Solution**: Consider using a more efficient method to remove leading zeros. For example, you could write a loop that iterates over the string from the beginning and stops when it encounters a non-zero character.\n\n\n"
                        }
                    ],
                    "metadata": {
                        "outputType": "performanceList",
                        "details": [
                            {
                                "lineNumber": 15,
                                "severity": 4,
                                "bugType": "CPU",
                                "description": "The use of FUNCTION NUMVAL for converting string to number is CPU-intensive. This function performs a lot of unnecessary checks for a simple integer conversion.",
                                "solution": "Use a simpler conversion function or method if available in the COBOL version you are using. If not, consider writing a custom conversion routine that does the bare minimum required for your specific use case."
                            },
                            {
                                "lineNumber": 34,
                                "severity": 6,
                                "bugType": "CPU",
                                "description": "The factorial calculation is done using a loop which is not efficient for large numbers. This can lead to high CPU usage and long execution times.",
                                "solution": "Consider using a more efficient algorithm for calculating factorial. For example, you could use a recursive function or utilize a memoization technique to store previously calculated results. However, be aware that recursion in COBOL can be tricky and may not be supported in all versions."
                            },
                            {
                                "lineNumber": 41,
                                "severity": 3,
                                "bugType": "Memory",
                                "description": "The INSPECT TALLYING FOR LEADING ZEROS operation is not efficient as it scans the entire string. This can be memory-intensive for large strings.",
                                "solution": "Consider using a more efficient method to remove leading zeros. For example, you could write a loop that iterates over the string from the beginning and stops when it encounters a non-zero character."
                            }
                        ]
                    }
                },
                {
                    "items": [
                        {
                            "mime": "text/markdown",
                            "data": "\n\n---\n\n### Boost Source-Level Data and Privacy Compliance Analysis\n\nLast Updated: Saturday, October 21, 2023 at 12:27:56 PM PDT\n\n**No bugs found**"
                        }
                    ],
                    "metadata": {
                        "outputType": "complianceCodeList",
                        "details": {}
                    }
                },
                {
                    "items": [
                        {
                            "mime": "text/markdown",
                            "data": "\n\n---\n\n### Boost Code Conversion\n\nLast Updated: Saturday, October 21, 2023 at 1:04:31 PM PDT\n\nBased on the explanation and the original COBOL code, here is the equivalent Python code:\n\n```python\nimport sys\n\ndef calculate_factorial(num):\n    factorial = 1\n    for i in range(1, num + 1):\n        factorial *= i\n    return factorial\n\ndef main():\n    # Get command line argument\n    cmd_args = sys.argv[1]\n\n    # Check if command line argument is numeric\n    if not cmd_args.isnumeric():\n        print(\"Error: Input is not numeric.\")\n        return\n\n    # Convert command line argument to integer\n    decinum = int(cmd_args)\n\n    # Check if command line argument is non-negative\n    if decinum < 0:\n        print(\"Error: Input is a negative number.\")\n        return\n\n    # Check if command line argument is an integer\n    if decinum != int(decinum):\n        print(\"Error: Input is not an integer.\")\n        return\n\n    # Calculate factorial if input is 0 or 1\n    if decinum == 0 or decinum == 1:\n        print(1)\n        return\n\n    # Calculate factorial\n    factorial = calculate_factorial(decinum)\n\n    # Print factorial without leading zeros\n    print(str(factorial).lstrip('0'))\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis Python code does the same thing as the COBOL code. It gets a command line argument, checks if it's numeric and non-negative, converts it to an integer, calculates the factorial if it's 0 or 1, and otherwise calculates the factorial using the `calculate_factorial` function. The result is then printed without leading zeros."
                        }
                    ],
                    "metadata": {
                        "outputType": "generatedCode",
                        "details": []
                    }
                }
            ],
            "metadata": {
                "id": 0,
                "type": "originalCode",
                "lineNumberBase": -1
            }
        }
    ],
    "metadata": {
        "defaultDir": ".boost",
        "sourceFile": "./factorial.cbl",
        "outputLanguage": "python"
    }
}